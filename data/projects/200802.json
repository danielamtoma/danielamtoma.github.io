{
    "rcn": "200802",
    "acronym": "RustBelt",
    "topics": "ERC-CoG-2015",
    "title": "Logical Foundations for the Future of Safe Systems Programming",
    "startDate": "01/04/2016",
    "endDate": "31/03/2021",
    "objective": "A longstanding question in the design of programming languages is how to balance safety and control. C-like languages give programmers low-level control over resource management at the expense of safety, whereas Java-like languages give programmers safe high-level abstractions at the expense of control.\n\nRust is a new language developed at Mozilla Research that marries together the low-level flexibility of modern C\\\\ with a strong 'ownership-based' type system guaranteeing type safety, memory safety, and data race freedom. As such, Rust has the potential to revolutionize systems programming, making it possible to build software systems that are safe by construction, without having to give up low-level control over performance.\n\nUnfortunately, none of Rust's safety claims have been formally investigated, and it is not at all clear that they hold. To rule out data races and other common programming errors, Rust's core type system prohibits the aliasing of mutable state, but this is too restrictive for implementing some low-level data structures. Consequently, Rust's standard libraries make widespread internal use of unsafe blocks, which enable them to opt out of the type system when necessary. The hope is that such unsafe code is properly encapsulated, so that Rust's language-level safety guarantees are preserved. But due to Rust's reliance on a weak memory model of concurrency, along with its bleeding-edge type system, verifying that\nRust and its libraries are actually safe will require fundamental advances to the state of the art.\n\nIn this project, we aim to equip Rust programmers with the first formal tools for verifying safe encapsulation of unsafe code. Any realistic languages targeting this domain in the future will encounter the same problem, so we expect our results to have lasting impact. To achieve this goal, we will build on recent breakthrough developments by the PI and collaborators in concurrent program logics and semantic models of type systems.",
    "totalCost": "1946250",
    "ecMaxContribution": "1946250",
    "coordinator": "MAX-PLANCK-GESELLSCHAFT ZUR FORDERUNG DER WISSENSCHAFTEN EV",
    "coordinatorCountry": "DE",
    "participants": "",
    "participantCountries": "",
    "projectParticipants": {
        "888898380": {
            "orgId": "888898380",
            "orgName": "MAX-PLANCK-GESELLSCHAFT ZUR FORDERUNG DER WISSENSCHAFTEN EV",
            "ecContrib": 1946250
        }
    },
    "calculatedTotalContribution": 1946250
}